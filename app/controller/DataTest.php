<?php


namespace app\controller;


use app\BaseController;
use app\model\User;
use think\facade\Db;

class DataTest extends BaseController
{

    public function initialize()
    {
//        parent::initialize(); // TODO: Change the autogenerated stub
          //数据库五种方法,看文档33pdf
          Db::event('before_select',function ($query){
              echo '执行了批量查询的操作!';
          });

          Db::event('after_update',function ($query){
             echo '执行了批量修改的操作';
          });
    }

    public function index()
    {
//       return 'index';
//       $user =Db::table('user')->select();
//        $user = Db::connect('mysql')->table('user')->select();
//        return json($user);
    }


    public function demo()
    {
        $user = Db::connect('demo')->table('user')->select();
        return json($user);
    }


    public function getUser()
    {
        $user = User::select();
        return json($user);
    }


    //如果希望只查询一条数据，可以使用find()方法，需指定where条件;
    public function selectOne()
    {
        $user = Db::table('user')->where('id', 1)->find();
        //返回最后一条数据  SELECT * FROM `user` WHERE `id` = 1 LIMIT 1
        return Db::getLastSql();
//       return json($user);
    }

    //使用findOrFail()方法同样可以查询一条数据，在没有数据时抛出一个异常;
    public function findOrFail()
    {
        $user = Db::table('user')->where('id', 3)->findOrFail();
        return json($user);
    }

    //使用findOrEmpty()方法也可以查询一条数据，但在没有数据时返回一个空数组;
    public function findOrempty()
    {
        $user = Db::table('user')->where('id', 1)->findOrFail();
        return json($user);
    }

    //查询多列数据
    public function select()
    {
        $user = Db::table('user')->select();
        return json($user);
    }


    //2. 多列数据在查询不到任何数据时返回空数组，使用selectOrFail()抛出异常;
    public function selectOrFail()
    {
        $user = Db::table('user')->where('id', 1)->selectOrFail();
        return json($user);
    }

    //3. 在select()方法后再使用toArray()方法，可以将数据集对象转化为数组;
    public function toArray()
    {
        $user = Db::table('user')->select()->toArray();
        return json($user);
    }

    //4. 当在数据库配置文件中设置了前缀，那么我们可以使用name()方法忽略前缀;
    public function nameTable()
    {
        $user = Db::name('user')->select();
        return json($user);
    }

    //通过value()方法，可以查询指定字段的值(单个)，没有数据返回null;
    public function nameValue()
    {
        $user = Db::name('user')->where('id', 1)->value('name');
        return json($user);
    }

    //数据库的链式查询1
    public function dataSelect1()
    {
        $userQuery = Db::name('user');
        $dataFind = $userQuery->where('id', 1)->find();
        $dataSelect = $userQuery->select();
        return json($dataSelect);
    }


    //数据库的链式查询2 使用removeOption()方法，可以清理掉上一次查询保留的值;
    public function dataSelect2()
    {
        $userQuery = Db::name('user');
        $data1 = $userQuery->order('id', 'desc')->select();
        $data2 = $userQuery->removeOption('order')->select();
//        $data2 = $userQuery -> select();
        return Db::getLastSql();
    }

    public function insertData()
    {
        $data = [
            'id' => 4,
            'age' => 20,
            'name' => '苏轼',
            'money' => 800
        ];


        //2.如果新增成功，insert()方法会返回一个1值;
//       return Db::name('user')->insert($data);

        //4. 如果想强行新增抛弃不存在的字段数据，则使用strict(false)方法，忽略异常;
//       return  Db::name('user')->strict(false)->insert($data);

        //5. 如果我们采用的数据库是mysql，可以支持replace写入;
        //6. insert和replace写入的区别，前者表示表中存在主键相同则报错，后者则修改;
//        Db::name('user')->replace()->insert($data);
//        return  Db::getLastSql();

        //7. 使用insertGetId()方法，可以在新增成功后返回当前数据ID;
        return Db::name('user')->insertGetId($data);
    }

    public function deleteData()
    {
        //1. 极简删除可以根据主键直接删除，删除成功返回影响行数，否则0;
//        return Db::name('user')->delete(8);
        //2. 根据主键，还可以删除多条记录;
        return Db::name('user')->delete([5, 6, 7]);

//        3. 正常情况下，通过where()方法来删除;
//        return Db::name('user')->where('id',1)->delete();
//        4. 通过true参数删除数据表所有数据，我还没测试，大家自行测试下;
//        return Db::name('user')->delete(true);
    }


    public function insertAll()
    {
        $data = [
            [
                'age' => 10,
                'name' => '阿斗',
                'money' => 100
            ],
            [
                'age' => 19,
                'name' => '杨超越',
                'money' => 200
            ]
        ];

        //return Db::name('user')->insertAll($data);

        //2. 批量新增也支持replace()方法，添加后改变成replaceinto;
//        return Db::name('user')->replace()->insertAll($data);

        //1. save()方法是一个通用方法，可以自行判断是新增还是修改(更新)数据;
        //2. save()方法判断是否为新增或修改的依据为，是否存在主键，不存在即新增;
        return Db::name('user')->save();
    }


    public function updateData()
    {
        //1. 使用update()方法来修改数据，修改成功返回影响行数，没有修改返回0;
//        $data = [
//            'name' => '小白龙'
//        ];
//        return Db::name('user')->where('id',2)->update($data);


        //2. 如果修改数据包含了主键信息，比如id，那么可以省略掉where条件;
//        $data = [
//          'id' => 2,
//          'name' => '武则天'
//        ];
//        return Db::name('user')->update($data);

        //3. 如果想让一些字段修改时执行SQL函数操作，可以使用exp()方法实现;
//        return Db::name('user')->where('id',2)->exp('money','UPPER(money)')->update();

        //4. 如果要自增/自减某个字段，可以使用inc/dec方法，并支持自定义步长;
//        return Db::name('user')->where('id',2)->inc('money')->dec('money',2)->update();

        //5. 一个更加简单粗暴灵活的方式，使用::raw()方法实现3，4点的内容;
         Db::name('user')->where('id', 309)
        ->update([
        'email' => Db::raw('UPPER(email)'),
        'price' => Db::raw('price + 1'), 'status' => Db::raw('status - 2')]);

        //6. 使用save()方法进行修改数据，这里必须指定主键才能实现修改功能;
       // return Db::name('user')->where('id', 2)->save(['name' => '老衲法海']);
    }


    public function compareSelect()
    {
        //where('字段名','查询表达式','查询条件');
//        $user = Db::name('user')->where('id',2)->find();
//        $user = Db::name('user')->where('id','=',3)->find();
//        使用<>、>、<、>=、<=可以筛选出各种符合比较值的数据列表;
        $user = Db::name('user')->where('id', '<>', 4)->select();
        return json($user);
    }

    public function sectionSelect()
    {
        //   二.区间查询

        //  1. 使用like表达式进行模糊查询;
        //  $user = Db::name('user')->where('name','like','李%')->select();

        //  2. like表达式还可以支持数组传递进行模糊查询;
        //$user = Db::name('user')->where('name','like',['李%','老%'],'or')->select();
        // SELECT * FROM `tp_user` WHERE (`name` LIKE '李%' OR `name` LIKE '老%')

        // 3. like表达式具有两个快捷方式whereLike()和whereNoLike();
        //  $user = Db::name('user')->whereLike('name','李%')->select();
        // $user = Db::name('user')->whereNotLike('name','%海')->select();

        //4. between表达式具有两个快捷方式whereBetween()和whereNotBetween();
        //  $user = Db::name('user')->where('money','between','400,800')->select();
        //   $user = Db::name('user')->where('money','between',[400,600])->select();
        // $user = Db::name('user')->whereBetween('money','400,800')->select();
        //  $user = Db::name('user')->whereNotBetween('money','400,800')->select();

        //5. in表达式具有两个快捷方式whereIn()和whereNotIn();
        // $user = Db::name('user')->where('id','in','2,3')->select();
        //  $user = Db::name('user')->where('id','in',['2','3','5'])->select();
        // $user = Db::name('user')->whereIn('id','2,3,5')->select();
        //$user = Db::name('user')->whereNotIn('id','2,3,5')->select();


        //  6. null表达式具有两个快捷方式whereNull()和whereNotNull();
        //  $user =  Db::name('user')->where('id',null)->select();
        //   $user = Db::name('user')->where('id','not null')->select();
        //  $user = Db::name('user')->whereNUll('id')->select();
        $user = Db::name('user')->whereNotNull('id')->select();
        return json($user);
    }

    public function expSelect()
    {
        //  1. 使用exp可以自定义字段后的SQL语句;
        // $user = Db::name('user')->where('id','exp','IN (2,3,5)')->select();
        $user = Db::name('user')->whereExp('id', 'IN(2,3,4)')->select();
        return $user;
    }


    public function timeSelect()
    {
        //一.传统方式
        //$user = Db::name('user')->where('create_time','>','2020-08-01')->select();
        //return json($user);

        //1. 可以使用>、<、>=、<=来筛选匹配时间的数据;
        //$user = Db::name('user')->whereBetween('create_time',['2020-08-01','2020-10-01'])->select();
        //return json($user);


        //二.快捷方式
        //1. 时间查询的快捷方法为whereTime()，直接使用>、<、>=、<=;
        //$user = Db::name('user')->whereTime('create_time','>','2020-08-01')->select();
        //return json($user);

        //2. 快捷方式也可以使用between和notbetween;
        // $user = Db::name('user')->whereBetween('create_time','2020-08-01,2020-11-30')->select();
        // return json($user);


        //3. 还有一种快捷方式为:whereBetweenTime()和whereNotBetweenTime();
        //$user = Db::name('user')->whereBetweenTime('create_time','2020-08-01','2020-10-01')->select();
        //return $user;

        //4. 默认的大于>，可以省略;
        // $user = Db::name('user')->whereTime('create_time','2020-08-13')->select();
        // return json($user);

        //三.固定查询
        //1. 使用whereYear查询今年的数据、去年的数据和某一年的数据
//        return json(Db::name('user')->whereYear('create_time')->select());
//        return json(Db::name('user')->whereYear('create_time','last year')->select());
        //  return json(Db::name('user')->whereYear('create_time','2020')->select());


        //2. 使用whereMonth查询当月的数据、上月的数据和某一个月的数据;
        // return  json(Db::name('user')->whereMonth('create_time')->select());
        // return  json(Db::name('user')->whereMonth('create_time','last month')->select());
        // return  json(Db::name('user')->whereMonth('create_time','2020-10')->select());


        //3. 使用whereDay查询今天的数据、昨天的数据和某一个天的数据;
//        return  json(Db::name('user')->whereDay('create_time')->select());
//        return  json(Db::name('user')->whereDay('create_time','last day')->select());
        //return  json(Db::name('user')->whereDay('create_time','2020-08-13')->select());

        //四.其它查询
        //1. 查询指定时间的数据，比如两小时内的;
        // return json(Db::name('user')->whereTime('create_time','-2 hours')->select());
        //2. 查询两个时间字段时间有效期的数据，比如会员开始到结束的期间;
        $user = Db::name('user')->whereBetweenTimeField('start_time',
            'end_time')->select();
        return $user;
    }

    public function aggregateSelect()
    {
        //一、聚合查询
        //1. 使用count()方法，可以求出所查询数据的数量;
        //$user = Db::name('user')->count();
        //return json($user);

        //2. count()可设置指定id，比如有空值(Null)的uid，不会计算数量;
        // $user = Db::name('user')->count('id');
        // return json($user);

        //3. 使用max()方法，求出所查询数据字段的最大值;
        // $user = Db::name('user')->max('money');
        //return json($user);

        //4. 如果max()方法，求出的值不是数值，则通过第二参数强制转换
        //$user = Db::name('user')->max('money',false);
        // return json($user);

        //5. 使用min()方法，求出所查询数据字段的最小值，也可以强制转换;
        //$user = Db::name('user')->min('money');
        //return json($user);

        //6. 使用avg()方法，求出所查询数据字段的平均值;
        //$user = Db::name('user')->avg('money');
        //return json($user);

        //7. 使用sum()方法，求出所查询数据字段的总和;
        $user = Db::name('user')->sum('money');
        return json($user);
    }

    public function childSelect()
    {
        //二.子查询
        //1. 使用fetchSql()方法，可以设置不执行SQL，而返回SQL语句，默认true;
        // return json(Db::name('user')->fetchSql(true)->select());

        //2. 使用buildSql()方法，也是返回SQL语句，不需要再执行select()，且有括号;
        //return json(Db::name('user')->buildSql(true));

        //3. 结合以上方法，我们实现一个子查询;

        //"( SELECT `uid` FROM `two` WHERE  `gender` = '男' )"
        //$subQuery = Db::name('two')->field('uid')->where('gender', '男')->buildSql(true);

        //[{"id":1,"user":"张三","math":158,"chinese":85,"english":95,"create_time":"2016-07-23 09:15:30"},
        //{"id":3,"user":"王五","math":95,"chinese":92,"english":95,"create_time":"2016-07-23 09:16:02"},
        //{"id":4,"user":"马七","math":84,"chinese":87,"english":94,"create_time":"2016-07-23 09:16:16"}]
       // $result = Db::name('one')->where('id', 'exp', 'IN' . $subQuery)->select();
       // return json($result);


        //4. 使用闭包的方式执行子查询;
        //[{"id":1,"user":"张三","math":158,"chinese":85,"english":95,"create_time":"2016-07-23 09:15:30"},{"id":3,"user":"王五","math":95,"chinese":92,"english":95,"create_time":"2016-07-23 09:16:02"},{"id":4,"user":"马七","math":84,"chinese":87,"english":94,"create_time":"2016-07-23 09:16:16"}]
       $result = Db::name('one')->where('id','in',function ($query){
           $query->name('two')->where('gender','男')->field('uid');
       })->select();
       return json($result);
    }

    public function nativeSelect()
    {
      //三.原生查询
      //1. 使用query()方法，进行原生SQL查询，适用于读取操作，SQL错误返回false;
       // $user = Db::query('select * from user');
       // return json($user);

      //  2. 使用execute方法，进行原生SQL更新写入等，SQL错误返回false;
       $user = Db::execute('update user set username="孙悟空2" where id = 25');
       return json($user);
    }


    //15. 链式查询方法.上
    public function  whereSelect()
    {
        //1. 表达式查询，就是where()方法的基础查询方式;
        //return json(Db::name('user')->where('id','>','70')->select());

        //2. 关联数组查询，通过键值对来数组键值对匹配的查询方式;
        //return json(Db::name('user')->where(['gender' => '男','price'=>100])->select());

        //3. 索引数组查询，通过数组里的数组拼装方式来查询;
        //return  json(Db::name('user')->
       // where([['gender','=','男'],['price','=','100']])->select());

        //4. 将复杂的数组组装后，通过变量传递，将增加可读性;
       // $map[] = ['gender','=','男'];
        //$map[] = ['price','in',[60,70,80]];
       // return json(Db::name('user')->where($map)->select());

        //5. 字符串形式传递，简单粗暴的查询方式，whereRaw()支持复杂字符串格式;
        //return json(Db::name('user')->whereRaw('gender = "男" AND price IN(60,70,80)')->select());

        //6. 如果SQL查询采用了预处理模式，比如id=:id，也能够支持;
        return json(Db::name('user')->whereRaw('id=:id',['id'=>19])->select());
    }


    public function  fieldSelect()
    {
        //1. 使用field()方法，可以指定要查询的字段;
        //return json(Db::name('user')->field('id','username','email')->select());
       // return json(Db::name('user')->field(['id', 'username', 'email'])->select());

        //2. 使用field()方法，给指定的字段设置别名;
        //return json(Db::name('user')->field('id','username as name')->select());
        //return json(Db::name('user')->field('id',['username'=>'name'])->select());

        //3. 在fieldRaw()方法里，可以直接给字段设置MySQL函数;
        //return json(Db::name('user')->fieldRaw('id,SUM(price)')->select());
        //4. 使用field(true)的布尔参数，可以显式的查询获取所有字段，而不是*;
        //return json(Db::name('user')->field(true)->select());
        //5. 使用withoutField()方法中字段排除，可以屏蔽掉想要不显示的字段;
        //return json(Db::name('user')->withoutField('details')->select());
        //6. 使用field()方法在新增时，验证字段的合法性;
        $data = [
            'username' => '武则天',
            'password' => '123',
            'email' => '123@163.com',
            'details' => '123'
        ];

        return json(Db::name('user')->field('username,password,email,details')->insert($data));
    }

    public function limitSelect()
    {
        //16. 链式查询方法.下
        //        1.limit
        //        2.page
        //        3.order
        //        4.group
        //        5.having


        //1. 使用limit()方法，限制获取输出数据的个数;
       // return json(Db::name('user')->limit(5)->select());

       //2. 分页模式，即传递两个参数，比如从第3条开始显示5条limit(2,5);
       //return json(Db::name('user')->limit(2,5)->select());

       //3. 实现分页，需要严格计算每页显示的条数，然后从第几条开始;

        //第一页
        //return json(Db::name('user')->limit(0,5)->select());
        //return json(Db::name('user')->limit(5,5)->select());


        //1. page()分页方法，优化了limit()方法，无须计算分页条数;
       // return json(Db::name('user')->page(0,5)->select());
       //return json(Db::name('user')->page(2,5)->select());


        //1. 使用order()方法，可以指定排序方式，没有指定第二参数，默认asc;
        //return json(Db::name('user')->order('id','desc')->select());

        //2. 支持数组的方式，对多个字段进行排序;
        //return json(Db::name('user')->order(['id'=>'desc','price'=>'asc'])->select());

        //3. 使用orderRaw()方法，支持排序的时候指定MySQL函数;
        //return json(Db::name('user')->orderRaw('FIELD(username,"樱桃小丸子") DESC')->select());

        //1. 使用group()方法，给性别不同的人进行price字段的总和统计;
       // return json(Db::name('user')->fieldRaw('gender,SUM(price)')->group('gender')->select());


        //2. 也可以进行多字段分组统计;
        //return json(Db::name('user')->fieldRaw('gender,SUM(price)')->group('gender,password')->select());


        //1. 使用group()分组之后，再使用having()进行筛选;

       return json(Db::name('user')
             ->fieldRaw('gender,SUM(price)')
             ->group('gender')
             ->having('SUM(price) > 60')
             ->select()
       );
    }

    public function advancedSelect()
    {
        ///生成的 SQL
        /// 1.高级查询
        //SELECT * FROM `tp_user` WHERE ( `username` LIKE '%xiao%' OR `email` LIKE '%xiao%' ) AND ( `price` > 0 AND `uid` > 0 )


        //1. 使用|(OR)或&(AND)来实现where条件的高级查询，where支持多个连缀;
//        return json(
//            Db::name('user')->
//            where('username|email','like','%xiao%')->
//            where('price&uid','>',0)
//            ->select()
//        );

        //2. 关联数组方式，可以在where进行多个字段进行查询;
        //生成SQL
        // SELECT * FROM `tp_user` WHERE `id` > 0 AND `status` = 1 AND `price` >= 80 AND `email` LIKE '%163%'
//        return json(
//            Db::name('user')->
//            where([
//                ['id','>',0],
//                ['status','=',1],
//                ['price','>=',80],
//                ['email','like','%163%']
//            ])->select()
//        );

        //3. 根据之前的课程中，条件字符串复杂组装，比如使用exp了，就使用raw()方法;
        //生成的 SQL
        //SELECT * FROM `tp_user` WHERE `status` = 1 AND ( `price` >80 )
//      return json(
//          Db::name('user')->
//          where([
//            ['status','=',1],
//            ['price','exp',Db::raw('>=80')]
//          ])->select()
//      );


        //4. 如果有多个where，并且where条件是分离的$map，而$map本身有多个条件;
        //5. 那么$map条件如果需要先执行出结果，再和后续条件判断，也就是加上括号;
        //6. 那么，需要对这个$map变量，再加上一个中括号处理优先级;
//        $map = [
//          ['status','=',1],
//          ['price','exp',Db::raw('>80')]
//        ];
//        return json(Db::name('user')->where([$map])->where('email','=','%163.com%')->select());


        //7. 如果，条件中有多次出现一个字段，并且需要OR来左右筛选，可以用whereOr;
        //生成的 SQL
        //SELECT * FROM `tp_user` WHERE ( `username` LIKE '%小%' AND `email` LIKE '%163%' ) OR ( `username` LIKE '%孙%' AND `email` LIKE '%.com%' )
//        $map1 = [
//          ['username','like','%小%'],
//          ['email','like','%163%']
//        ];
//        $map2 = [
//          ['username','like','%孙%'],
//          ['email','like','%.com%']
//        ];
//        return json(Db::name('user')->whereOr([$map1,$map2])->select());


      //8. 闭包查询可以连缀，会自动加上括号，更清晰，如果是OR，请用whereOR();
//      return json(
//        Db::name('user')->
//        where(function ($query){
//            $query->where('id','>',10);
//        })->
//        whereOr(function ($query){
//            $query->where('username','like','%小%');
//        })->select()
//      );

        //9. 对于比较复杂或你不知道如何拼装SQL条件，那么就直接使用whereRaw()即可;
//        return json(
//          Db::name('user')->
//          whereRaw('(username LIKE "%小%" AND email LIKE "%163%") OR (price > 80)')->
//          select()
//        );

        //10. whereRaw()方式也支持参数绑定操作，具体如下;
       return  json(
           Db::name('user')->
           whereRaw(
               '(username LIKE :username AND email LIKE :email) OR (price > :price)',
               ['username'=>'%小%','email'=>'%163%','price'=>80]
           )->select()
       );
    }


    public function quickDataSelect()
    {
        //18. 数据库的快捷查询
        //whereOr  字段OR查询
        //whereXor 字段XOR查询
        //whereNull 查询字段是否为Null
        //whereNotNull 查询字段是否不为Null
        //whereIn  字段IN查询
        //whereNotIn 字段NOT IN查询
        //whereBetween 字段BETWEEN查询
        //whereNotBetween 字段NOT BETWEEN查询
        //whereLike 字段LIKE查询
        //whereNotLike 字段NOT LIKE查询
        //whereExists EXISTS条件查询
        //whereNotExists NOT EXISTS条件查询
        //whereExp 表达式查询
        //whereColumn 比较两个字段

        //2. whereColumn()方法，比较两个字段的值，符合的就筛选出来;
        //return json(Db::name('user')->whereColumn('update_time','>=','create_time')->select());


        //相等可以简化，只需要两边的字段
        //return json(Db::name('user')->whereColumn('update_time','create_time')->select());

        //3.系统还针对字段查询提供了几个方便查询的快捷方式;

        //4.whereFieldName()方法，查询某个字段的值，注意FileName是字段名;
        //return json(Db::name('user')->whereEmail('xiaoxin@163.com')->find());

        //如果字段是 create_time，则 whereCreateTime，驼峰式写法;

        //5.getByFieldName()方法，查询某个字段的值，注意只能查询一条，不需要find();
       // return json(Db::name('user')->getByEmail('xiaoxin@163.com'));

        //6. getFieldByFieldName()方法，通过查询得到某个指定字段的单一值;
        //return json(Db::name('user')->getFieldByEmail('xiaoxin@163.com','username'));


        //1. when()可以通过条件判断，执行闭包里的分支查询;
      return json(
          Db::name('user')->
          when(false,function ($query){
              $query->where('id','>',0);
          },function ($query){
              $query->where('username','like','%小%');
          }
          )->select()
      );

    }

    public function  affairSelect()
    {
        //一.事务处理
        /**
         * 1. 数据库的表引擎需要是InnoDB才可以使用，如果不是调整即可;
         * 2. 事务处理，需要执行多个SQL查询，数据是关联恒定的;
         * 3. 如果成功一条查询，改变了数据，而后一条失败，则前面的数据回滚;
         * 4. 比如:蜡笔小新给路飞3快钱，自己-3，对方+3，这时需要事务处理;
         * 5. 系统提供了两种事务处理的方式，第一种是自动处理，出错自动回滚;
         * 6. 手动处理，基本和原生处理类似，可以自行输出错误信息;
         */
        //启动事物
        Db::startTrans();
        try {
          Db::name('user')->where('id',19)->save(['price'=>Db::raw('price-3')]);
          Db::name('user')->where('id',20)->save(['price'=>Db::raw('price+3')]);
          Db::commit();
          echo '提交事物成功';
        }catch (\Exception $e){
            echo '执行SQL事物失败!';
            Db::rollback();
        }
    }

    public function getterSelect()
    {
        /**
         * 二.获取器
         * 1. 获取器的意思就是:将数据的字段进行转换处理再进行操作;
         * 2. 比如在获取数据列表的时候，将获取到的邮箱字段全部大写;
         * withAttr sql 获取器 循环记录集时可预先处理(改变字段值、预先转换)某个字段值再输出
         */
        $user = Db::name('user')->withAttr('emial',function ($value,$data){
            return strtoupper($value);
        })->select();
        return json($user);
    }

    public function datasetSelect()
    {
        /**
         * 1. 所谓数据集，是当查询后的结果集，它是 think\Collection 类型和数组一样;
         * 2. 虽然操作和数组类似，但它额外提供了一些方法，方法如下:
         * 3. 注意:这里的方法关键字某些和数据库查询类似，但它是数据集操作的方法;
         * 4. 由于方法较多，我们尝试几个理解一下即可，有需要可以回头查阅;
         */
        //获取数据集
        $user = Db::name('user')->select();
        //转换成数组
        dump($user->toArray());
        //将数据集随机打乱
        dump($user->shuffle());
        //删掉数据中最后一个元素
        dump($user->pop());
        //使用 whereIn 查询结果集
        dump($user->whereIn('id', [19,20,21]));
    }
}